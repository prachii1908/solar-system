name: Solar System workflow 
on:
  workflow_dispatch:
  push:
    branches:
    - main
    - feature/*

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
# both the jobs (unit testing and code coverage will run in parallel)

    unit-testing:
      name: Unit-testing
      strategy:
        matrix:
            nodejs_version: [18, 20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest

      runs-on: ${{ matrix.operating_system }}
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup NodeJS - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
            node-version: ${{ matrix.nodejs_version }}
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with: 
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Unit Testing
        run: npm test
        id: nodejs-unit-testing-step-id

      - name: Archive test results
## it always execute even after the previous step fails
        if: always()  
        uses: actions/upload-artifact@v3
        with:
            name: Mocha-test-result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup NodeJS - v18
        uses: actions/setup-node@v3
        with:
            node-version: 18
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with: 
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm install
      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage
      - name: Archive Test result
        uses: actions/upload-artifact@v3
        with:
            name: Code Coverage Result
            path: coverage
            retention-days: 5
    
    docker:
      needs: [unit-testing, code-coverage]
      name: containerization
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}  ## our repository owner name is default git variable
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker build for testing
        uses: docker/build-push-action@v4
        with:
        # context is the path where your Dockerfile exist (if it is in the root then give fullstop)
          context: .
          push: false
          tags: ${{ vars.USERNAME }}/solar-system:${{ github.sha }}

      - name: docker image testing
        run: |
          docker images
          docker run -d --name solar-system-app \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.USERNAME }}/solar-system:${{ github.sha }}
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          echo Testing image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry push
        uses: docker/build-push-action@v4
        with:
          # context is the path where your Dockerfile exist (if it is in the root then give fullstop)
          context: .
          push: true
          tags: |
            ${{ vars.USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
  
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        - name: Fetch Kubernetes cluster details
          run: |
            kubectl version --short
            echo --------------------------
            kubectl get nodes
  
